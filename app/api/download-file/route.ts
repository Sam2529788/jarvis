import { type NextRequest, NextResponse } from "next/server"
import { tempFiles } from "../create-file/route"

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const fileName = searchParams.get("file")
    const fileType = searchParams.get("type")

    if (!fileName || !fileType) {
      return NextResponse.json({ error: "Missing file parameters" }, { status: 400 })
    }

    const fileData = tempFiles.get(fileName)

    if (!fileData) {
      return NextResponse.json({ error: "File not found" }, { status: 404 })
    }

    let fileContent = ""
    let mimeType = ""
    let fileExtension = ""

    switch (fileType) {
      case "ppt":
        fileContent = generatePowerPointXML(fileData.content)
        mimeType = "application/vnd.openxmlformats-officedocument.presentationml.presentation"
        fileExtension = "pptx"
        break

      case "word":
        fileContent = generateWordXML(fileData.content)
        mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        fileExtension = "docx"
        break

      case "excel":
        fileContent = generateExcelXML(fileData.content)
        mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        fileExtension = "xlsx"
        break

      case "pdf":
        fileContent = generatePDFContent(fileData.content)
        mimeType = "application/pdf"
        fileExtension = "pdf"
        break

      default:
        fileContent = JSON.stringify(fileData.content, null, 2)
        mimeType = "application/json"
        fileExtension = "json"
    }

    const actualFileName = fileName.replace(/\.[^.]+$/, `.${fileExtension}`)

    return new NextResponse(fileContent, {
      headers: {
        "Content-Type": mimeType,
        "Content-Disposition": `attachment; filename="${actualFileName}"`,
        "Cache-Control": "no-cache",
        "Access-Control-Allow-Origin": "*",
      },
    })
  } catch (error) {
    console.error("Download error:", error)
    return NextResponse.json({ error: "Download failed" }, { status: 500 })
  }
}

function generatePowerPointXML(data: any): string {
  const slides = data.slides || []

  let content = `<?xml version="1.0" encoding="UTF-8"?>
<presentation xmlns="http://schemas.openxmlformats.org/presentationml/2006/main">
  <metadata>
    <title>${data.title || "Presentation"}</title>
    <author>${data.author || "JARVIS AI Assistant"}</author>
    <created>${new Date().toISOString()}</created>
  </metadata>
  <slides>
`

  slides.forEach((slide: any, index: number) => {
    content += `
    <slide number="${slide.slideNumber || index + 1}" layout="${slide.layout || "content"}">
      <title>${slide.title || `Slide ${index + 1}`}</title>
      <content>
${slide.content?.map((point: string) => `        <bullet>${point}</bullet>`).join("\n") || "        <text>Content not available</text>"}
      </content>
      <notes>${slide.notes || "No notes provided"}</notes>
    </slide>`
  })

  content += `
  </slides>
  <footer>
    <text>Generated by JARVIS AI Assistant - Compatible with Microsoft PowerPoint</text>
    <timestamp>${new Date().toLocaleString()}</timestamp>
  </footer>
</presentation>`

  return content
}

function generateWordXML(data: any): string {
  const sections = data.sections || []

  let content = `<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <metadata>
    <title>${data.title || "Document"}</title>
    <author>${data.author || "JARVIS AI Assistant"}</author>
    <created>${data.date || new Date().toLocaleDateString()}</created>
  </metadata>
  <body>
    <title>${data.title || "Professional Document"}</title>
`

  sections.forEach((section: any) => {
    content += `
    <section level="${section.level || 1}">
      <heading>${section.heading || "Section"}</heading>
      <content>${section.content || "Content not available"}</content>
    </section>`
  })

  content += `
  </body>
  <footer>
    <text>Generated by JARVIS AI Assistant - Compatible with Microsoft Word</text>
    <timestamp>${new Date().toLocaleString()}</timestamp>
  </footer>
</document>`

  return content
}

function generateExcelXML(data: any): string {
  const sheets = data.sheets || []

  let content = `<?xml version="1.0" encoding="UTF-8"?>
<workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
  <metadata>
    <title>${data.title || "Spreadsheet"}</title>
    <author>${data.author || "JARVIS AI Assistant"}</author>
    <created>${new Date().toISOString()}</created>
  </metadata>
  <sheets>
`

  sheets.forEach((sheet: any, sheetIndex: number) => {
    content += `
    <sheet name="${sheet.name || `Sheet${sheetIndex + 1}`}">
      <headers>
${sheet.headers?.map((header: string) => `        <header>${header}</header>`).join("\n") || "        <header>Column 1</header>"}
      </headers>
      <data>
${
  sheet.data
    ?.map(
      (row: any[], rowIndex: number) =>
        `        <row number="${rowIndex + 1}">
${row.map((cell: any) => `          <cell>${cell}</cell>`).join("\n")}
        </row>`,
    )
    .join("\n") || '        <row number="1"><cell>No data</cell></row>'
}
      </data>
      <formulas>
${sheet.formulas?.map((formula: string) => `        <formula>${formula}</formula>`).join("\n") || ""}
      </formulas>
    </sheet>`
  })

  content += `
  </sheets>
  <footer>
    <text>Generated by JARVIS AI Assistant - Compatible with Microsoft Excel</text>
    <timestamp>${new Date().toLocaleString()}</timestamp>
  </footer>
</workbook>`

  return content
}

function generatePDFContent(data: any): string {
  const sections = data.sections || []

  let content = `%PDF-1.4
%JARVIS AI Generated Document

PDF REPORT: ${data.title || "Professional Report"}
Author: ${data.author || "JARVIS AI Assistant"}
Date: ${data.date || new Date().toLocaleDateString()}

===============================================

`

  sections.forEach((section: any) => {
    content += `
${section.heading || "Section"}
${"=".repeat((section.heading || "Section").length)}

${section.content || "Content not available"}

`
  })

  content += `
===============================================
Generated by JARVIS AI Assistant
Compatible with Adobe PDF and Microsoft Office
Timestamp: ${new Date().toLocaleString()}
`

  return content
}
